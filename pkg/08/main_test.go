package main

import (
	"reflect"
	"strings"
	"testing"
)

func TestPart1(t *testing.T) {
	result, err := Part1(strings.Split(`............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............`, "\n"))
	if err != nil {
		t.Fatal(err)
	}
	if result != 14 {
		t.Fatalf("expected 14, got %d", result)
	}
}

func TestUniqueAntinodes(t *testing.T) {
	lines := strings.Split(`..........
..........
..........
....a.....
..........
.....a....
..........
..........
..........
..........`, "\n")

	antinodes := UniqueAntinodes(lines)

	if !reflect.DeepEqual(antinodes, map[Point]struct{}{
		Point{3, 1}: struct{}{},
		Point{6, 7}: struct{}{},
	}) {
		t.Errorf("got %d", antinodes)
	}
}
func TestUniqueAntinodes2(t *testing.T) {
	lines := strings.Split(`..........
..........
..........
....a.....
........a.
.....a....
..........
..........
..........
..........`, "\n")

	antinodes := UniqueAntinodes(lines)

	expected := map[Point]struct{}{
		Point{3, 1}: struct{}{},
		Point{0, 2}: struct{}{},
		Point{2, 6}: struct{}{},
		Point{6, 7}: struct{}{},
	}

	if !reflect.DeepEqual(antinodes, expected) {
		t.Errorf("want %d, got %d", expected, antinodes)
	}
}

func TestPart2(t *testing.T) {
	result, err := Part2(strings.Split(`............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............`, "\n"))
	if err != nil {
		t.Fatal(err)
	}
	if result != 34 {
		t.Fatalf("expected 34, got %d", result)
	}
}
